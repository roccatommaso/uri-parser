;;;; -*- Mode: Lisp -*-
    
(defun identificatore-p (lista uri-structure)
  (cond ((null lista) NIL)
	((or (equal (first lista) #\/)
	     (equal (first lista) #\?)
	     (equal (first lista) #\#)
	     (equal (first lista) #\@)
	     (equal (first lista) #\:))
	 (values lista uri-structure))
	(T (append uri-structure (list (first lista)))
	   (identificatore-p (rest lista)
			     (append uri-structure (list (first lista)))))))

(defun identificatore-host-p (lista uri-structure)
  (cond ((null lista) NIL)
	((or (equal (first lista) #\/)
	     (equal (first lista) #\.)
	     (equal (first lista) #\?)
	     (equal (first lista) #\#)
	     (equal (first lista) #\@)
	     (equal (first lista) #\:))
	 (values lista uri-structure))
	(T (append uri-structure (list (first lista)))
	   (identificatore-host-p (rest lista)
			     (append uri-structure (list (first lista)))))))

(defun digit-p (num)
  (if (not (characterp num))
      NIL
      (if (and (char<= num #\9)
	       (char>= num #\0))
	  T
	  NIL)))


(defun fragment-p (lista)
  (if (null lista)
      NIL
      (if (characterp (first lista))
	  (fragment-p (rest lista))
	  (values lista))))

;;;definizone di query-p

(defun query-p (lista)
  (cond ((null lista) NIL)
	((equal (first lista) #\#)
	 (values lista))
	(T (query-p (rest lista)))))
  
(defun path-p (lista)
  (if (null lista)
      NIL
      (values (identificatore-p lista))))
      
(defun ip-p (lista)
  (setq lista (octect-p lista))
  ;(format t "~a~&" lista)
  (setq lista (is-it-a #\. lista))
  ;(format t "~a~&" lista)
  (setq lista (octect-p lista))
  ;(format t "~a~&" lista)
  (setq lista (is-it-a #\. lista))
  ;(format t "~a~&" lista)
  (setq lista (octect-p lista))
  ;(format t "~a~&" lista)
  (setq lista (is-it-a #\. lista))
  ;(format t "~a~&" lista)
  (setq lista (octect-p lista))
  ;(format t "~a~&" lista)
  )

(defun octect-p (lista)
  (cond ((or (and (digit-p (first lista))
		  (char<= (first lista) #\2)
		  (digit-p (second lista))
		  (char<= (second lista) #\5)
		  (digit-p (third lista))
		  (char<= (third lista) #\5))
	     (and (digit-p (first lista))
		  (char<= (first lista) #\2)
		  (digit-p (second lista))
		  (char<= (second lista) #\4))
	     (and (digit-p (first lista))
		  (char<= (first lista) #\1)
		  (digit-p (second lista))
		  (digit-p (third lista))))
	 (values (rest (rest (rest lista)))))
	((and (digit-p (first lista))
	      (char>= (first lista) #\1)
	      (digit-p (second lista)))
	 (values (rest (rest lista))))
	((digit-p (first lista))
	 (values (rest lista)))
	(T NIL)))

(defun is-it-a (char lista uri-structure)
  (if (equal (first lista) char)
      (values (rest lista) uri-structure)
      (values lista uri-structure))
  )

(defun domain-p (lista uri-structure)
  (identificatore-host-p lista (cons "host" uri-structure)))

(defun authority (lista)
  (setq lista (double-slash lista))
  (format t "~a~&" lista)
  (setq lista (userinfo lista))
  (format t "~a~&" lista)
  (setq lista (host-p lista))
  (format t "~a~&" lista)
  (setq lista (port-p lista))
  (format t "~a~&" lista)
  (values lista))

(defun userinfo (lista)
  (if (is-it-a #\@ (identificatore-p lista))
      (setq lista (identificatore-p lista))
      (setq lista (is-it-a #\@ lista)))
  (values lista))
  

(defun double-slash (lista uri-structure)
  (if (and (equal (first lista) #\/)
	   (equal (second lista) #\/))
      (values (rest (rest lista)))
      (values lista))
  (values uri-structure))

(defun port-p (lista)
  (if (null lista)
      NIL
      (ciclo-port lista))
  )

(defun ciclo-port (lista)
  (if (digit-p (first lista))
      (ciclo-port (rest lista))
      (values lista)
      ))

(defun uri-parser (lista)
  (setq lista (identificatore-p lista ()))
  (setq lista (is-it-a #\: lista))
  (setq lista (double-slash lista))
  (values lista))

(defun scheme-p (lista uri-structure)
  (identificatore-p lista (cons "scheme" uri-structure)))
